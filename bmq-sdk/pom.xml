<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2022 Bloomberg Finance L.P.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.bloomberg.bmq</groupId>
    <artifactId>bmq-sdk-java</artifactId>
    <version>0.0.16-SNAPSHOT</version>
  </parent>

  <artifactId>bmq-sdk</artifactId>
  <version>0.0.16-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>BlazingMQ Java SDK</name>
  <description>Java SDK for using BlazingMQ</description>
  <organization>
    <name>Bloomberg L.P.</name>
  </organization>

  <properties>
    <rootLocation>${project.parent.basedir}</rootLocation>
    <maven.deploy.skip>false</maven.deploy.skip>
    <maven.test.skip>false</maven.test.skip>

    <it.dockerImage />
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>

    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
    </dependency>

    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-all</artifactId>
    </dependency>

    <dependency>
      <groupId>com.google.code.gson</groupId>
      <artifactId>gson</artifactId>
    </dependency>

    <dependency>
      <groupId>com.github.spotbugs</groupId>
      <artifactId>spotbugs-annotations</artifactId>
    </dependency>

    <!-- Test dependencies-->

    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-inline</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-api</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-slf4j-impl</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.openjdk.jmh</groupId>
      <artifactId>jmh-core</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.openjdk.jmh</groupId>
      <artifactId>jmh-generator-annprocess</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.github.docker-java</groupId>
      <artifactId>docker-java-core</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.github.docker-java</groupId>
      <artifactId>docker-java-transport-httpclient5</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>com.github.spotbugs</groupId>
        <artifactId>spotbugs-maven-plugin</artifactId>
        <configuration>
          <excludeFilterFile>spotbugs_ignore.xml</excludeFilterFile>
        </configuration>
      </plugin>

      <plugin>
        <groupId>com.github.ferstl</groupId>
        <artifactId>depgraph-maven-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.sonarsource.scanner.maven</groupId>
        <artifactId>sonar-maven-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
            <configuration>
              <destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile>
            </configuration>
          </execution>

          <!-- Attached to Maven test phase -->
          <execution>
            <id>report</id>
            <goals>
              <goal>report</goal>
            </goals>
            <phase>test</phase>
            <configuration>
              <dataFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</dataFile>
              <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
            </configuration>
          </execution>

          <execution>
            <id>pre-integration-test</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
            <phase>pre-integration-test</phase>
            <configuration>
              <destFile>${project.build.directory}/coverage-reports/jacoco-it.exec</destFile>
              <propertyName>failsafeArgLine</propertyName>
            </configuration>
          </execution>

          <execution>
            <id>post-integration-test</id>
            <goals>
              <goal>report</goal>
            </goals>
            <phase>post-integration-test</phase>
            <configuration>
              <dataFile>${project.build.directory}/coverage-reports/jacoco-it.exec</dataFile>
              <outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <configuration>
          <excludePackageNames>com.bloomberg.bmq.*</excludePackageNames>
        </configuration>
      </plugin>

      <!-- Used by 'benchmarks' profile -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <executions>
          <execution>
            <id>integration-test</id>
            <configuration>
              <includes>
                <!-- Default test inclusions -->
                <include>**/IT*.java</include>
                <include>**/*IT.java</include>
                <include>**/*ITCase.java</include>

                <!-- Include Crc32cTest as an integration test !-->
                <include>com/bloomberg/bmq/it/impl/infr/proto/Crc32cTest.java</include>
              </includes>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-release-plugin</artifactId>
        <configuration>
          <tagNameFormat>BMQ_SDK_@{project.version}</tagNameFormat>
        </configuration>
      </plugin>

      <!-- Used by 'dockerized-brokers' profile -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
      </plugin>

      <!-- Jflex lexer code generation from lex specification file, used by ExpressionValidator -->
      <plugin>
        <groupId>de.jflex</groupId>
        <artifactId>jflex-maven-plugin</artifactId>
        <version>1.9.1</version>
        <executions>
          <execution>
            <goals>
              <!-- Binds by default to the lifecycle phase: 'generate-sources' -->
              <goal>generate</goal>
            </goals>
            <configuration>
              <lexDefinitions>
                <lexDefinition>src/main/java/com/bloomberg/bmq/impl/infr/util/expressionvalidator</lexDefinition>
              </lexDefinitions>
              <outputDirectory>src/main/java</outputDirectory>
              <backup>false</backup>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>

  </build>

  <profiles>
    <profile>
      <!-- This profile is activated with JDK9 and above (actually, only JDK11 and JDK17 are supported).
           It allows to produce JAR file which contains Java8 and Java9 versions of Crc32c class by doing the following:
           - add compiler extra execution step in order to compile classes in "java9" directory
           - modify "jar plugin" configuration to produce multi release jar file
           - modify "jacoco plugin" configuration to exclude Java9 Crc32c class version from unit tests report and
             Java8 version from integration tests report -->
      <id>java9-crc32c</id>
      <activation>
        <jdk>[9,)</jdk>
      </activation>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-compiler-plugin</artifactId>
              <executions>
                <execution>
                  <!-- Add compiler extra execution to build Java 9 classes -->
                  <id>java-9-classes-compile</id>
                  <goals>
                    <goal>compile</goal>
                  </goals>
                  <configuration>
                    <release>9</release>
                    <compileSourceRoots>${basedir}/src/main/java9</compileSourceRoots>
                    <!-- When "multiReleaseOutput=true", compiled classes go to
                         "./target/classes/META-INF/versions/9" directory, so they do not overwrite classes compiled
                         by default for Java 8 in "./target/classes" directory. -->
                    <multiReleaseOutput>true</multiReleaseOutput>
                  </configuration>
                </execution>
              </executions>
            </plugin>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-jar-plugin</artifactId>
              <configuration>
                <archive>
                  <manifestEntries>
                    <!-- Specify that this is a multi release jar -->
                    <Multi-Release>true</Multi-Release>
                  </manifestEntries>
                </archive>
              </configuration>
            </plugin>
            <plugin>
              <groupId>org.jacoco</groupId>
              <artifactId>jacoco-maven-plugin</artifactId>
              <executions>
                <execution>
                  <id>report</id>
                  <configuration>
                    <excludes>
                      <!-- Exclude Java9 Crc32c class (should not be used in unit tests) -->
                      <exclude>META-INF/versions/9/com/bloomberg/bmq/impl/infr/proto/Crc32c.class</exclude>
                    </excludes>
                  </configuration>
                </execution>
                <execution>
                  <id>post-integration-test</id>
                  <configuration>
                    <excludes>
                      <!-- Exclude Java8 Crc32c class (should not be used in integration tests) -->
                      <exclude>com/bloomberg/bmq/impl/infr/proto/Crc32c.class</exclude>
                    </excludes>
                  </configuration>
                </execution>
              </executions>
            </plugin>
          </plugins>
        </pluginManagement>
      </build>
    </profile>

    <profile>
      <!-- When active, this profile enables producing of separate JAR with performance tests. -->
      <id>benchmarks</id>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-assembly-plugin</artifactId>
              <executions>
                <execution>
                  <id>make-perf-tests-assembly</id>
                  <goals>
                    <goal>single</goal>
                  </goals>
                  <phase>package</phase>
                  <configuration>
                    <descriptors>
                      <descriptor>src/test/assembly/perf-tests.xml</descriptor>
                    </descriptors>
                    <attach>true</attach>
                    <archive>
                      <manifest>
                        <mainClass>org.openjdk.jmh.Main</mainClass>
                      </manifest>
                    </archive>
                    <skipAssembly>${maven.test.skip}</skipAssembly>
                  </configuration>
                </execution>
              </executions>
            </plugin>
          </plugins>
        </pluginManagement>
      </build>
    </profile>

    <profile>
      <!-- This profile builds docker image for integration tests and cleans up running containers. -->
      <id>dockerized-brokers</id>
      <activation>
        <property>
          <name>it.dockerImage</name>
        </property>
      </activation>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <groupId>org.codehaus.mojo</groupId>
              <artifactId>exec-maven-plugin</artifactId>
              <executions>
                <execution>
                  <!-- Build docker image -->
                  <id>build-docker-image</id>
                  <goals>
                    <goal>exec</goal>
                  </goals>
                  <phase>pre-integration-test</phase>
                  <configuration>
                    <executable>${project.basedir}/src/test/bin/docker-build.sh</executable>
                    <skip>${maven.test.skip}</skip>
                    <arguments>
                      <argument>${it.dockerImage}</argument>
                    </arguments>
                  </configuration>
                </execution>
                <execution>
                  <!-- Clean up broken docker containers -->
                  <id>clean-up-docker-containers</id>
                  <goals>
                    <goal>exec</goal>
                  </goals>
                  <phase>post-integration-test</phase>
                  <configuration>
                    <executable>${project.basedir}/src/test/bin/docker-cleanup.sh</executable>
                    <skip>${maven.test.skip}</skip>
                  </configuration>
                </execution>
              </executions>
            </plugin>
          </plugins>
        </pluginManagement>
      </build>
    </profile>

    <profile>
      <!-- This profile uses natively build broker to run ITs. -->
      <id>native-brokers</id>
      <activation>
        <property>
          <name>it.brokerDir</name>
        </property>
      </activation>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <groupId>org.codehaus.mojo</groupId>
              <artifactId>exec-maven-plugin</artifactId>
              <executions>
                <execution>
                  <!-- Clean up broker tmp folders -->
                  <id>clean-up-broker-dirs</id>
                  <goals>
                    <goal>exec</goal>
                  </goals>
                  <phase>post-integration-test</phase>
                  <configuration>
                    <executable>${project.basedir}/src/test/bin/broker-cleanup.sh</executable>
                    <skip>${maven.test.skip}</skip>
                    <arguments>
                      <argument>${it.brokerDir}</argument>
                    </arguments>
                  </configuration>
                </execution>
              </executions>
            </plugin>
          </plugins>
        </pluginManagement>
      </build>
    </profile>
  </profiles>
</project>
